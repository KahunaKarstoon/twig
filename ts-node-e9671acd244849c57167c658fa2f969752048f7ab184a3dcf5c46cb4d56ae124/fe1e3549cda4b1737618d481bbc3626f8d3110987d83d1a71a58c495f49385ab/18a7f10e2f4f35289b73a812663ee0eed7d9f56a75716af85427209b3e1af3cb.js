"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = require("querystring");
var protractor_1 = require("protractor");
var app_po_1 = require("../PageObjects/app.po");
var utils_1 = require("../utils");
var jsonTwiglet = require('../PageObjects/FormsForModals/twigletUpload.json');
describe('Twiglet Lifecycle', function () {
    var page;
    beforeAll(function () {
        page = new app_po_1.TwigPage();
        page.navigateTo();
        page.user.loginDefaultTestUser();
        page.header.twigletTab.deleteTwigletIfNeeded(utils_1.twigletName, page);
        protractor_1.browser.waitForAngular();
        page.header.goToTab('Twiglet');
        page.header.twigletTab.startNewTwigletProcess();
        page.formForModals.fillInTextFieldByLabel('Name', utils_1.twigletName);
        page.formForModals.uploadFileByLabel('Upload JSON', 'twigletUpload.json');
        protractor_1.browser.waitForAngular();
    });
    afterAll(function () {
        // browser.manage().logs().get('browser').then(function(browserLog) {
        //   console.log('log: ' + require('util').inspect(browserLog));
        // });
        utils_1.deleteDefaultJsonImportedTwiglet(page);
    });
    it('name and json file are enough to make the form valid', function () {
        expect(page.formForModals.checkIfButtonEnabled('Create')).toBeTruthy();
    });
    it('should close the modal when the submit button is pressed', function () {
        page.formForModals.clickButton('Create');
        protractor_1.browser.waitForAngular();
        page.formForModals.waitForModalToClose();
        expect(page.formForModals.isModalOpen).toBeFalsy();
    });
    it('should redirect to the twiglet page', function () {
        protractor_1.browser.getCurrentUrl().then(function (url) {
            expect(url.endsWith("/twiglet/" + querystring_1.escape(utils_1.twigletName))).toEqual(true);
        });
    });
    it('should have the correct number of nodes', function () {
        expect(page.twigletGraph.nodeCount).toEqual(jsonTwiglet.nodes.length);
    });
    it('should have the correct number of links', function () {
        expect(page.twigletGraph.linkCount).toEqual(jsonTwiglet.links.length);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3R3aWcvZTJlL2pvdXJuZXlzL3R3aWdsZXQtaW1wb3J0aW5nLmUyZS1zcGVjLnRzIiwic291cmNlcyI6WyIvdHdpZy9lMmUvam91cm5leXMvdHdpZ2xldC1pbXBvcnRpbmcuZTJlLXNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBcUM7QUFDckMseUNBQXFDO0FBQ3JDLGdEQUFpRDtBQUNqRCxrQ0FJa0I7QUFDbEIsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7QUFFaEYsUUFBUSxDQUFDLG1CQUFtQixFQUFFO0lBQzVCLElBQUksSUFBYyxDQUFDO0lBRW5CLFNBQVMsQ0FBQztRQUNSLElBQUksR0FBRyxJQUFJLGlCQUFRLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLG1CQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEUsb0JBQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLG1CQUFXLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQzFFLG9CQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUM7UUFDUCxxRUFBcUU7UUFDckUsZ0VBQWdFO1FBQ2hFLE1BQU07UUFDTix3Q0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzREFBc0QsRUFBRTtRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3pFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBEQUEwRCxFQUFFO1FBQzdELElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLG9CQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1FBQ3hDLG9CQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztZQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFZLG9CQUFNLENBQUMsbUJBQVcsQ0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXNjYXBlIH0gZnJvbSAncXVlcnlzdHJpbmcnO1xuaW1wb3J0IHsgYnJvd3NlciB9IGZyb20gJ3Byb3RyYWN0b3InO1xuaW1wb3J0IHsgVHdpZ1BhZ2UgfSBmcm9tICcuLi9QYWdlT2JqZWN0cy9hcHAucG8nO1xuaW1wb3J0IHtcbiAgY3JlYXRlRGVmYXVsdEpzb25JbXBvcnRlZFR3aWdsZXQsXG4gIGRlbGV0ZURlZmF1bHRKc29uSW1wb3J0ZWRUd2lnbGV0LFxuICB0d2lnbGV0TmFtZVxufSBmcm9tICcuLi91dGlscyc7XG5jb25zdCBqc29uVHdpZ2xldCA9IHJlcXVpcmUoJy4uL1BhZ2VPYmplY3RzL0Zvcm1zRm9yTW9kYWxzL3R3aWdsZXRVcGxvYWQuanNvbicpO1xuXG5kZXNjcmliZSgnVHdpZ2xldCBMaWZlY3ljbGUnLCAoKSA9PiB7XG4gIGxldCBwYWdlOiBUd2lnUGFnZTtcblxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIHBhZ2UgPSBuZXcgVHdpZ1BhZ2UoKTtcbiAgICBwYWdlLm5hdmlnYXRlVG8oKTtcbiAgICBwYWdlLnVzZXIubG9naW5EZWZhdWx0VGVzdFVzZXIoKTtcbiAgICBwYWdlLmhlYWRlci50d2lnbGV0VGFiLmRlbGV0ZVR3aWdsZXRJZk5lZWRlZCh0d2lnbGV0TmFtZSwgcGFnZSk7XG4gICAgYnJvd3Nlci53YWl0Rm9yQW5ndWxhcigpO1xuICAgIHBhZ2UuaGVhZGVyLmdvVG9UYWIoJ1R3aWdsZXQnKTtcbiAgICBwYWdlLmhlYWRlci50d2lnbGV0VGFiLnN0YXJ0TmV3VHdpZ2xldFByb2Nlc3MoKTtcbiAgICBwYWdlLmZvcm1Gb3JNb2RhbHMuZmlsbEluVGV4dEZpZWxkQnlMYWJlbCgnTmFtZScsIHR3aWdsZXROYW1lKTtcbiAgICBwYWdlLmZvcm1Gb3JNb2RhbHMudXBsb2FkRmlsZUJ5TGFiZWwoJ1VwbG9hZCBKU09OJywgJ3R3aWdsZXRVcGxvYWQuanNvbicpO1xuICAgIGJyb3dzZXIud2FpdEZvckFuZ3VsYXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIC8vIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgIC8vICAgY29uc29sZS5sb2coJ2xvZzogJyArIHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0KGJyb3dzZXJMb2cpKTtcbiAgICAvLyB9KTtcbiAgICBkZWxldGVEZWZhdWx0SnNvbkltcG9ydGVkVHdpZ2xldChwYWdlKTtcbiAgfSk7XG5cbiAgaXQoJ25hbWUgYW5kIGpzb24gZmlsZSBhcmUgZW5vdWdoIHRvIG1ha2UgdGhlIGZvcm0gdmFsaWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhZ2UuZm9ybUZvck1vZGFscy5jaGVja0lmQnV0dG9uRW5hYmxlZCgnQ3JlYXRlJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjbG9zZSB0aGUgbW9kYWwgd2hlbiB0aGUgc3VibWl0IGJ1dHRvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgIHBhZ2UuZm9ybUZvck1vZGFscy5jbGlja0J1dHRvbignQ3JlYXRlJyk7XG4gICAgYnJvd3Nlci53YWl0Rm9yQW5ndWxhcigpO1xuICAgIHBhZ2UuZm9ybUZvck1vZGFscy53YWl0Rm9yTW9kYWxUb0Nsb3NlKCk7XG4gICAgZXhwZWN0KHBhZ2UuZm9ybUZvck1vZGFscy5pc01vZGFsT3BlbikudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVkaXJlY3QgdG8gdGhlIHR3aWdsZXQgcGFnZScsICgpID0+IHtcbiAgICBicm93c2VyLmdldEN1cnJlbnRVcmwoKS50aGVuKHVybCA9PiB7XG4gICAgICBleHBlY3QodXJsLmVuZHNXaXRoKGAvdHdpZ2xldC8ke2VzY2FwZSh0d2lnbGV0TmFtZSl9YCkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGF2ZSB0aGUgY29ycmVjdCBudW1iZXIgb2Ygbm9kZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHBhZ2UudHdpZ2xldEdyYXBoLm5vZGVDb3VudCkudG9FcXVhbChqc29uVHdpZ2xldC5ub2Rlcy5sZW5ndGgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGxpbmtzJywgKCkgPT4ge1xuICAgIGV4cGVjdChwYWdlLnR3aWdsZXRHcmFwaC5saW5rQ291bnQpLnRvRXF1YWwoanNvblR3aWdsZXQubGlua3MubGVuZ3RoKTtcbiAgfSk7XG59KTtcblxuIl19