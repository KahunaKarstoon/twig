"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var protractor_1 = require("protractor");
var app_po_1 = require("../PageObjects/app.po");
describe('Model Lifecycle', function () {
    var page;
    var modelName = 'Test Model';
    beforeAll(function () {
        page = new app_po_1.TwigPage();
        page.navigateTo();
        page.user.loginDefaultTestUser();
        page.header.modelTab.deleteModelIfNeeded(modelName, page);
        protractor_1.browser.waitForAngular();
    });
    afterAll(function () {
        // browser.manage().logs().get('browser').then(function(browserLog) {
        //   console.log('log: ' + require('util').inspect(browserLog));
        // });
    });
    describe('Create a Model', function () {
        beforeAll(function () {
            page.header.goToTab('Model');
        });
        it('pops up the create model modal when the button is pressed', function () {
            page.header.modelTab.startNewModelProcess();
            expect(page.formForModals.modalTitle).toEqual('Create New Model');
        });
        it('does not start out showing any form errors', function () {
            expect(page.formForModals.formErrorCount).toEqual(0);
        });
        it('displays an error if the name is empty', function () {
            page.formForModals.makeInputFieldDirtyByLabel('Name');
            expect(page.formForModals.getErrorByLabel('Name')).toEqual('You must enter a name for your model!');
        });
        it('removes the error if a value is put into the name field', function () {
            page.formForModals.fillInTextFieldByLabel('Name', modelName);
            expect(page.formForModals.getErrorByLabel('Name')).toBeUndefined();
        });
        it('should enable the "Create" button once the minimum is filled out', function () {
            expect(page.formForModals.checkIfButtonEnabled('Create')).toBeTruthy();
        });
        it('should close the modal when the submit button is pressed', function () {
            page.formForModals.clickButton('Create');
            protractor_1.browser.waitForAngular();
            page.formForModals.waitForModalToClose();
            expect(page.formForModals.isModalOpen).toBeFalsy();
        });
        it('should allow us to edit the model', function () {
            page.header.modelEditTab.startModelEditProcess();
            expect(page.modelEditForm.isOpen).toBeTruthy();
        });
        it('should start with no entities', function () {
            expect(page.modelEditForm.entityCount).toEqual(0);
        });
        it('allows the user to add an entity', function () {
            page.modelEditForm.addEntity('zzzzz', 'dollar', '#008800');
            page.modelEditForm.addAttribute(1, 'attr1', 'String', false);
            expect(page.modelEditForm.entityCount).toEqual(1);
        });
        it('adds new entities to the top of the form', function () {
            page.modelEditForm.addEntity('aaaaa', 'car', '#880088');
            expect(page.modelEditForm.row[2].type).toEqual('zzzzz');
        });
        it('allows the user to remove an entity', function () {
            page.modelEditForm.clickButton('fa-trash');
            expect(page.modelEditForm.entityCount).toEqual(1);
        });
        it('can save the model', function () {
            page.modelEditForm.saveModelEdits();
            page.formForModals.fillInOnlyTextField('Test Model Created');
            page.formForModals.clickButton('Save Changes');
            protractor_1.browser.waitForAngular();
            expect(page.modelInfo.entityCount).toEqual(1);
        });
    });
    describe('Editing Models', function () {
        it('can start the editing process', function () {
            page.modelEditForm.startEditing();
            expect(page.modelEditForm.isOpen).toBeTruthy();
        });
        it('can add an entity', function () {
            page.modelEditForm.startAddingEntity();
            expect(page.modelEditForm.entityCount).toEqual(2);
        });
        it('makes the form invalid when initially adding an entity', function () {
            expect(page.modelEditForm.isReadyToSave).toBeFalsy();
        });
        it('can fill in the type but that is not enough to make the form valid', function () {
            page.modelEditForm.row[1].type = 'aaaaaa';
            expect(page.modelEditForm.isReadyToSave).toBeFalsy();
        });
        it('can fill in the icon and with the type that is enough to make the form valid', function () {
            page.modelEditForm.row[1].icon = 'bug';
            expect(page.modelEditForm.isReadyToSave).toBeTruthy();
        });
        var attribute;
        it('adding an attribute makes the form invalid again', function () {
            page.modelEditForm.startAddingAttribute(1).then(function (rs) { return attribute = rs; });
            expect(page.modelEditForm.isReadyToSave).toBeFalsy();
        });
        it('attribute name is not enough to make the form valid', function () {
            attribute.name = 'attr1';
            expect(page.modelEditForm.isReadyToSave).toBeFalsy();
        });
        it('filling in the name and the type is enough to make the form valid', function () {
            attribute.type = 'String';
            expect(page.modelEditForm.isReadyToSave).toBeTruthy();
        });
        it('can save the changes', function () {
            page.modelEditForm.saveModelEdits();
            page.formForModals.fillInOnlyTextField('Making some changes');
            page.formForModals.clickButton('Save Changes');
            protractor_1.browser.waitForAngular();
            expect(page.modelInfo.entityCount).toEqual(2);
        });
    });
    describe('Deleting Models', function () {
        beforeAll(function () {
            page = new app_po_1.TwigPage();
            page.navigateTo();
        });
        it('can bring up the delete model modal', function () {
            page.header.modelTab.startDeleteModelProcess(modelName);
            expect(page.formForModals.modalTitle).toEqual("Delete " + modelName);
        });
        it('disables the "Delete" button if the name does not match', function () {
            expect(page.formForModals.checkIfButtonEnabled('Delete')).toBeFalsy();
        });
        it('enables the button if the form is filled out correctly', function () {
            page.formForModals.fillInOnlyTextField(modelName);
            expect(page.formForModals.checkIfButtonEnabled('Delete')).toBeTruthy();
        });
        it('should close the modal when the Delete button is pressed', function () {
            page.formForModals.clickButton('Delete');
            page.formForModals.waitForModalToClose();
            expect(page.formForModals.isModalOpen).toBeFalsy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,